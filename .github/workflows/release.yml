name: Release and Publish

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  version:
    name: Determine Version & Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.minver.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: global.json
      - name: Setup Taskfile
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create .env file
        run: |
          cp public.env .env
          echo "NUGET_API_KEY=DUMMY_KEY" >> .env
        shell: bash
      - name: Restore .NET local tools
        run: task setup\
      - name: Get version from MinVer
        id: minver
        run: |
          echo "version=$(task get-version)" >> $GITHUB_OUTPUT
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.minver.outputs.version }}
          release_name: Release ${{ steps.minver.outputs.version }}
          body: "Automated release for version ${{ steps.minver.outputs.version }}."
          draft: false
          prerelease: false

  build:
    name: Build, Test & Package
    needs: version
    runs-on: ubuntu-latest
    outputs:
      is_library: ${{ steps.package.outputs.is_library }}
      is_application: ${{ steps.package.outputs.is_application }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: global.json
      - name: Setup Taskfile
        uses: arduino/setup-task@v2
      - name: Create .env file
        run: |
          cp public.env .env
          echo "NUGET_API_KEY=DUMMY_KEY" >> .env
      
      - name: Run Tests
        # We specify the sub-taskfile directly to be explicit
        run: task test

      - name: Package based on project type
        id: package # Give this step an ID to reference its outputs
        run: |
          source public.env
          if [[ -n "$PROJECT_TO_PACK" ]]; then
            echo "Project is a library. Packing NuGet package..."
            task pack:nuget
            echo "is_library=true" >> $GITHUB_OUTPUT
          else
            echo "is_library=false" >> $GITHUB_OUTPUT
          fi

          # Check if PROJECT_TO_PUBLISH is set and run the corresponding task
          if [[ -n "$PROJECT_TO_PUBLISH" ]]; then
            echo "Project is an application. Publishing files for Velopack..."
            task publish-app -v -- --RID win-x64 # Pass RID to the task
            echo "is_application=true" >> $GITHUB_OUTPUT
          else
            echo "is_application=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  publish-nuget:
    name: Publish NuGet Package
    needs: [version, build]
    runs-on: ubuntu-latest
    if: success() && needs.build.outputs.is_library == 'true'
    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist
      - name: Setup Taskfile
        uses: arduino/setup-task@v2
      - name: Create .env file with Secret
        run: |
          cp public.env .env
          echo "NUGET_API_KEY=${{ secrets.NUGET_API_KEY }}" >> .env

      - name: Push NuGet Package
        run: task dotnet:push-nuget

  publish-velopack:
    name: Publish Velopack Release
    needs: [version, build]
    runs-on: windows-latest
    if: success() && needs.build.outputs.is_application == 'true'
    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Setup Taskfile
        uses: arduino/setup-task@v2

      - name: Create .env file
        run: copy public.env .env
        shell: pwsh

      - name: Install Velopack CLI
        run: dotnet tool install -g vpk

      - name: Create Velopack Package
        run: task pack:velopack
        env:
          APP_VERSION: ${{ needs.version.outputs.version }}
          RID: win-x64
        shell: pwsh

      - name: Upload Release Assets with GitHub CLI
        # This single step uses the official gh CLI to upload all release assets.
        # It correctly handles wildcards.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload v${{ needs.version.outputs.version }} ./dist/releases/*
        shell: pwsh
name: Publish Stable Release

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'

permissions:
  contents: write

jobs:
  # Job 1: Check the configuration and produce outputs for other jobs.
  check-config:
    name: Check Project Configuration
    runs-on: ubuntu-latest
    outputs:
      # These outputs will be available to other jobs via the 'needs' context.
      is_library: ${{ steps.check_file.outputs.is_library }}
      is_app: ${{ steps.check_file.outputs.is_app }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Read configuration from public.env
        id: check_file
        run: |
          # Check for PROJECT_TO_PACK and set the first output
          if grep -q "PROJECT_TO_PACK=.+" public.env; then
            echo "is_library=true" >> $GITHUB_OUTPUT
          else
            echo "is_library=false" >> $GITHUB_OUTPUT
          fi

          # Check for PROJECT_TO_PUBLISH and set the second output
          if grep -q "PROJECT_TO_PUBLISH=.+" public.env; then
            echo "is_app=true" >> $GITHUB_OUTPUT
          else
            echo "is_app=false" >> $GITHUB_OUTPUT
          fi

  # Job 2: Publish NuGet package, if configured as a library.
  release-nuget:
    name: Publish NuGet Package
    needs: check-config # This job depends on the check finishing first.
    # This 'if' condition now correctly uses the 'needs' context.
    if: needs.check-config.outputs.is_library == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
      - name: Setup Taskfile
        uses: arduino/setup-task@v2
      - name: Create .env file with secrets
        run: echo "NUGET_API_KEY=${{ secrets.NUGET_API_KEY }}" > .env
        env: 
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }} 
      - name: Run Tests
        run: task test
      - name: Pack and Push NuGet Package
        run: task push-nuget

  # Job 3: Prepare the Velopack release, if configured as an application.
  release-velopack:
    name: Prepare Velopack Release
    needs: check-config # This job also depends on the check.
    if: needs.check-config.outputs.is_app == 'true'
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}

  # Job 4: Build the application on a matrix.
  build-velopack:
    name: Build for ${{ matrix.os }}-${{ matrix.arch }}
    needs: release-velopack # Depends on the release placeholder being created.
    # The 'if' condition is inherited from the 'needs' dependency.
    # If release-velopack is skipped, this job will also be skipped.
    runs-on: ${{ matrix.runner_os }}
    strategy:
      matrix:
        include:
          - { runner_os: windows-latest, os: win, arch: x64 }
          - { runner_os: ubuntu-latest, os: linux, arch: x64 }
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
      - name: Setup Taskfile
        uses: arduino/setup-task@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Run Tests
        run: task test
      - name: Add .NET tools to PATH
        if: runner.os != 'Windows' # This step is only needed on Linux and macOS
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH
      - name: Build and Pack for ${{ matrix.os }}-${{ matrix.arch }}
        run: task build-platform-release OS=${{ matrix.os }} ARCH=${{ matrix.arch }} APP_VERSION=${{ github.ref_name }}
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-assets-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/releases/

  # Job 5: Publish all built Velopack artifacts.
  publish-velopack:
    name: Publish All Velopack Assets
    needs: [release-velopack, build-velopack]
    runs-on: ubuntu-latest
    steps:
      - name: Download all release artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts
      - name: Upload assets to GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload ${{ github.ref_name }} ./all-artifacts/*/*/* --clobber